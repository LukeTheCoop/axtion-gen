# MarketAgent Optimized Directory Structure

```
/marketagent
│
├── app                        # Main application code
│   ├── __init__.py
│   ├── api                    # API modules
│   │   ├── __init__.py
│   │   ├── controllers        # API endpoint controllers
│   │   │   ├── __init__.py
│   │   │   ├── audio_controller.py
│   │   │   ├── config_controller.py
│   │   │   ├── content_controller.py
│   │   │   ├── delivery_controller.py
│   │   │   └── video_controller.py
│   │   ├── middleware         # API middleware
│   │   │   ├── __init__.py
│   │   │   ├── auth_middleware.py
│   │   │   ├── error_middleware.py
│   │   │   └── logging_middleware.py
│   │   ├── schemas            # API data validation schemas
│   │   │   ├── __init__.py
│   │   │   ├── audio_schemas.py
│   │   │   ├── config_schemas.py
│   │   │   ├── content_schemas.py
│   │   │   └── video_schemas.py
│   │   └── routes.py          # API route definitions
│   │
│   ├── core                   # Core business logic
│   │   ├── __init__.py
│   │   ├── content            # Content generation domain
│   │   │   ├── __init__.py
│   │   │   ├── script_generator.py
│   │   │   ├── prompt_enhancer.py
│   │   │   └── creativity_engine.py
│   │   │
│   │   ├── audio              # Audio processing domain
│   │   │   ├── __init__.py
│   │   │   ├── text_to_speech.py
│   │   │   ├── audio_mixer.py
│   │   │   ├── music_processor.py
│   │   │   └── silence_detector.py
│   │   │
│   │   ├── video              # Video processing domain
│   │   │   ├── __init__.py
│   │   │   ├── clip_processor.py
│   │   │   ├── video_merger.py
│   │   │   ├── caption_generator.py
│   │   │   └── transition_effects.py
│   │   │
│   │   └── delivery           # Delivery domain
│   │       ├── __init__.py
│   │       ├── video_composer.py
│   │       ├── output_formatter.py
│   │       └── platform_delivery.py
│   │
│   ├── infrastructure         # Infrastructure and external services
│   │   ├── __init__.py
│   │   ├── ai_services        # AI service integrations
│   │   │   ├── __init__.py
│   │   │   ├── anthropic_client.py
│   │   │   └── elevenlab_client.py
│   │   │
│   │   ├── storage            # Storage utilities
│   │   │   ├── __init__.py
│   │   │   ├── file_system.py
│   │   │   └── blob_storage.py
│   │   │
│   │   ├── ffmpeg             # Media processing utilities
│   │   │   ├── __init__.py
│   │   │   ├── ffmpeg_audio.py
│   │   │   ├── ffmpeg_video.py
│   │   │   └── ffprobe.py
│   │   │
│   │   └── queue              # Message queue for async processing
│   │       ├── __init__.py
│   │       ├── job_queue.py
│   │       └── task_processor.py
│   │
│   ├── config                 # Configuration management
│   │   ├── __init__.py
│   │   ├── settings.py        # App settings
│   │   ├── environment.py     # Environment configuration
│   │   └── validators.py      # Config validators
│   │
│   ├── common                 # Common utilities and helpers
│   │   ├── __init__.py
│   │   ├── exceptions.py      # Custom exception classes
│   │   ├── utils.py           # General utility functions
│   │   ├── logging.py         # Logging configuration
│   │   └── decorators.py      # Common decorators
│   │
│   └── main.py                # Application entry point
│
├── data                       # Data directories
│   ├── media                  # Media storage
│   │   ├── videos             # Source video clips
│   │   │   └── {genres}
│   │   ├── audio              # Generated audio files
│   │   │   └── {project_id}
│   │   ├── music              # Music tracks
│   │   │   └── {track_id}
│   │   └── output             # Final output videos
│   │       └── {project_id}
│   │
│   ├── prompts                # Prompt templates and user prompts
│   │   └── {genres}
│   │
│   ├── temp                   # Temporary working files (cleaned up regularly)
│   │   └── {project_id}
│   │
│   └── captions               # Caption files
│       └── {project_id}
│
├── tests                      # Test suite
│   ├── unit                   # Unit tests
│   │   ├── api
│   │   ├── core
│   │   ├── infrastructure
│   │   └── config
│   │
│   ├── integration            # Integration tests
│   │   ├── api_integration
│   │   ├── core_integration
│   │   └── end_to_end
│   │
│   ├── fixtures               # Test fixtures
│   │   ├── videos
│   │   ├── audio
│   │   └── prompts
│   │
│   └── conftest.py            # Test configuration
│
├── docs                       # Documentation
│   ├── api                    # API documentation
│   ├── architecture           # Architecture diagrams
│   ├── development            # Development guides
│   ├── user                   # User guides
│   └── examples               # Example configurations and workflows
│
├── scripts                    # Utility scripts
│   ├── setup.py               # Setup script
│   ├── db_migration.py        # Database migration scripts
│   ├── test_data_generator.py # Generate test data
│   └── cleanup.py             # Cleanup temporary files
│
├── docker                     # Docker configuration
│   ├── Dockerfile             # Main application Dockerfile
│   ├── docker-compose.yml     # Docker Compose for local development
│   ├── docker-compose.prod.yml # Production Docker Compose
│   └── .dockerignore          # Docker ignore file
│
├── .github                    # GitHub configurations
│   └── workflows              # CI/CD workflows
│       ├── testing.yml        # Testing workflow
│       ├── linting.yml        # Linting workflow
│       └── deployment.yml     # Deployment workflow
│
├── .vscode                    # VSCode configurations
│   ├── launch.json            # Debugging configurations
│   └── settings.json          # Editor settings
│
├── requirements
│   ├── base.txt               # Base dependencies
│   ├── dev.txt                # Development dependencies
│   ├── test.txt               # Testing dependencies
│   └── prod.txt               # Production dependencies
│
├── .env.example               # Example environment variables
├── .gitignore                 # Git ignore file
├── README.md                  # Project readme
├── LICENSE                    # License file
├── CHANGELOG.md               # Change log
└── pyproject.toml             # Python project configuration
```

## Key Improvements in the New Structure

### 1. Domain-Driven Organization
- Core business logic separated into clear domains (content, audio, video, delivery)
- Each domain has well-defined responsibilities and boundaries

### 2. Layered Architecture
- **API Layer**: Handles HTTP requests, routing, and data validation
- **Core Layer**: Contains business logic and domain models
- **Infrastructure Layer**: Manages external services and technical concerns

### 3. Clean Configuration Management
- Configuration organized in a dedicated module
- Environment-specific settings separated from application code
- Configuration validation built-in

### 4. Improved Testing Structure
- Separate directories for unit, integration, and end-to-end tests
- Test fixtures isolated from production code
- Comprehensive test coverage facilitated by the structure

### 5. Better Resource Management
- Clear data organization with project-specific directories
- Temporary files managed in dedicated locations
- Data segregated by type and purpose

### 6. DevOps Integration
- Docker configuration for consistent environments
- CI/CD workflow templates
- Environment variable management

### 7. Documentation
- Comprehensive documentation organized by audience and purpose
- Architecture diagrams to visualize system design
- Example configurations and workflows

### 8. Dependency Management
- Separated requirements files for different environments
- Modern Python project configuration with pyproject.toml
- Clean dependency specification

This structure establishes a solid foundation for a maintainable, testable, and scalable application while addressing the issues identified in the current implementation.
